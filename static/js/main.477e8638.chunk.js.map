{"version":3,"sources":["Pokecard/Pokecard.js","Pokegame/Pokegame.js","App/App.js","serviceWorker.js","index.js"],"names":["Pokecard","num","leftPaddedNum","this","props","id","concat","toString","react_default","a","createElement","className","src","alt","Component","Pokegame","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","gameOver","incrementScore","currentState","score","recordClick","index","newPokemonArr","toConsumableArray","pokemonArr","wasClicked","console","log","removeClicks","i","length","replay","setState","gameStarted","shufflePokemonArr","j","Math","floor","random","temp","startGame","clickHandler","e","state","name","_this2","slice","map","item","key","onClick","src_Pokecard_Pokecard","App","src_Pokegame_Pokegame","Boolean","window","location","hostname","match","ReactDOM","render","src_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.477e8638.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Pokecard.css';\n\nclass Pokecard extends Component {\n\n\n    render() {\n        // We need to make things easier to read\n        \n        const leftPaddedNum = (num => {\n            let paddedNum = '';\n            if (num < 10) {\n                paddedNum = `00${num.toString()}`;\n            } else if (num < 100) {\n                paddedNum = `0${num.toString()}`;\n            } else {\n                paddedNum = num.toString();\n            }\n            \n            return paddedNum;\n        })(this.props.id);\n\n        return (\n            <div className='Pokecard'>\n                <img className='Pokecard-img' \n                src={`https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${leftPaddedNum}.png`} \n                alt={this.props.alt} \n                />\n            </div>\n        )\n    }\n}\n\n// <h2>{this.props.name}</h2>\n// <img src={this.props.img}/>\n// <p>Exp:{this.props.experience}</p>\n\nexport default Pokecard;","import React, { Component } from 'react';\nimport Pokecard from '../Pokecard/Pokecard';\nimport './Pokegame.css';\n\nclass Pokegame extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            pokemonArr: [\n                { id: 4, name: 'Charmander', wasClicked: false },\n                { id: 7, name: 'Squirtle', wasClicked: false },\n                { id: 11, name: 'Metapod', wasClicked: false },\n                { id: 12, name: 'Butterfree', wasClicked: false },\n                { id: 25, name: 'Pikachu', wasClicked: false },\n                { id: 39, name: 'Jigglypuff', wasClicked: false },\n                { id: 94, name: 'Gengar', wasClicked: false },\n                { id: 133, name: 'Eevee', wasClicked: false },\n                { id: 151, name: 'Mew', wasClicked: false },\n                { id: 54, name: 'Psyduck', wasClicked: false },\n            ],\n            gameStarted: false,\n            score: 0,\n            gameOver: false\n        }\n    }\n\n    gameOver = () => {\n        return { gameOver: true }\n    }\n\n    incrementScore = currentState => {\n        return { score: currentState.score + 1 }\n    }\n\n    recordClick = index => currentState => {\n        let newPokemonArr = [...currentState.pokemonArr];\n        newPokemonArr[index].wasClicked = true;\n\n        console.log(newPokemonArr[index])\n\n        return { pokemonArr: [...newPokemonArr] };\n    }\n\n    removeClicks = currentState => {\n        let newPokemonArr = [...currentState.pokemonArr];\n\n        for (let i = 0 ; i < newPokemonArr.length ; i++ ) {\n            if (newPokemonArr[i].wasClicked >= 1) {\n                newPokemonArr[i].wasClicked = false;\n            }\n        }\n        console.log(\"Clicks removed\",newPokemonArr);\n\n        return { pokemonArr: [...newPokemonArr ]};\n    }\n\n    replay = () => {\n        this.setState({ gameStarted: false, score: 0, gameOver: false });\n\n        this.setState( this.removeClicks );\n    }\n\n    shufflePokemonArr = currentState => {\n        let newPokemonArr = [...currentState.pokemonArr];\n\n        for (var i = newPokemonArr.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = newPokemonArr[i];\n            newPokemonArr[i] = newPokemonArr[j];\n            newPokemonArr[j] = temp;\n        }\n\n        return { pokemonArr: [...newPokemonArr]};\n    }\n\n    startGame = () => {\n        this.setState({ gameStarted: true });\n    }\n\n    clickHandler = index => e => {\n        if (this.state.gameStarted === false) {\n            this.startGame();\n        }\n        \n        if ( this.state.pokemonArr[index].wasClicked === false ) {\n            this.setState(this.incrementScore);\n            this.setState(this.recordClick(index));\n            this.setState( this.shufflePokemonArr );\n        } else {\n            this.setState(this.gameOver);\n        }\n\n    }\n\n    render() {\n        return (\n            <div className='Pokegame'>\n                <div id='Pokegame-instructions-container'>\n                    <h1 id='Pokegame-instructions' className='title'>\n                        {this.state.gameOver === true ? \"You lose...\" : \"\"}\n                        {this.state.gameStarted ? `Score: ${this.state.score}` : \"Don't click on the same Pok√©mon twice!\"}\n                    </h1>\n                </div>\n                <div className={`Pokegame-row ${this.state.gameOver ? \"is-hidden\" : \"\"}`}>\n                    {this.state.pokemonArr.slice(0,4).map((item,index) => {\n                        return (\n                            <button className=\"Pokegame-button\" key={index} onClick={this.clickHandler(index)}>\n                                <Pokecard id={item.id} alt={item.name} />\n                            </button>\n                        )\n                    })}\n                </div>\n                <div className={`Pokegame-row ${this.state.gameOver? \"\" : \"is-hidden\"}`}>\n                    <button className=\"Pokegame-replay-btn btn-hover color-11\" onClick={this.replay}>\n                        Replay\n                    </button>\n                </div>\n                <div className={`Pokegame-row ${this.state.gameOver ? \"is-hidden\" : \"\"}`}>\n                    {this.state.pokemonArr.slice(4,8).map((item,index) => {\n                        return (\n                            <button className=\"Pokegame-button\" key={index} onClick={this.clickHandler(index)}>\n                                <Pokecard id={item.id} alt={item.name} />\n                            </button>\n                        )\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Pokegame;","import React from 'react';\nimport Pokegame from '../Pokegame/Pokegame'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div id=\"App\">\n      <div></div>\n      <img id='App-title' src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/International_Pok%C3%A9mon_logo.svg/1200px-International_Pok%C3%A9mon_logo.svg.png\" alt=\"Pokemon logo\" />\n      <Pokegame/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}